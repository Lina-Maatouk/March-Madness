count(tailnum, wt = distance)
plane_delays <- flights %>%
filter(arr_delay < 60 | dep_delay < 60) %>%
count(tailnum, wt = distance)
View(plane_delays)
plane_delays <- flights %>%
filter(arr_delay < 60 | dep_delay < 60) #%>%
#count(tailnum, wt = distance)
View(plane_delays)
plane_delays <- flights %>%
filter(arr_delay < 60 & dep_delay < 60) #%>%
#count(tailnum, wt = distance)
View(plane_delays)
plane_delays <- flights %>%
filter(arr_delay <= 60 & dep_delay <= 60) #%>%
#count(tailnum, wt = distance)
View(plane_delays)
plane_delays <- flights %>%
filter(arr_delay <= 60 & dep_delay <= 60) %>%
count(tailnum, wt = distance)
View(plane_delays)
View(plane_delays)
plane_delays <- flights %>%
filter(arr_delay <= 60 & dep_delay <= 60) %>%
count(tailnum)
View(plane_delays)
plane_delays <- flights %>%
filter(dep_delay > 60) %>%
group_by(tailnum) %>%
summarize(first_delay = min(time_hour)) %>%
summarize(flights_before_delay = sum(time_hour < first_delay))
plane_delays <- flights %>%
filter(dep_delay > 60) %>%
group_by(tailnum) %>%
summarise(first_delay = min(time_hour)) %>%
summarise(flights_before_delay = sum(time_hour < first_delay))
plane_delays <- flights %>%
filter(dep_delay > 60) %>%
group_by(tailnum) %>%
summarise(first_delay = min(time_hour))
plane_delays <- flights %>%
filter(dep_delay > 60) %>%
group_by(tailnum) %>%
summarise(first_delay = min(time_hour))
View(plane_delays)
final_delay_df <- plane_delay %>%
left_join(plane_delays, by = "tailnum") %>%
group_by(tailnum) %>%
summarise(flights_before_delay = sum(time_hour < first_delay))
View(flights)
plane_delays <- flights %>%
filter(dep_delay > 60) %>%
group_by(tailnum) %>%
summarise(first_delay = min(time_hour))
final_delay_df <- plane_delays %>%
left_join(plane_delays, by = "tailnum") %>%
group_by(tailnum) %>%
summarise(flights_before_delay = sum(time_hour < first_delay))
final_delay_df <- plane_delays %>%
left_join(plane_delays, by = "tailnum") %>%
group_by(tailnum) %>%
summarise(flights_before_delay = sum(time_hour < first_delay))
View(plane_delays)
final_delay_df <- flights %>%
left_join(plane_delays, by = "tailnum") %>%
group_by(tailnum) %>%
summarise(flights_before_delay = sum(time_hour < first_delay))
View(final_delay_df)
flights <- nycflights13::flights
badcarriers <- flights %>%
group_by(carrier,dest) %>%
summarize(n())
View(badcarriers)
library(tidytext)
library(textdata)
library(dplyr)
library(stringr)
library(tidyr)
library(ggplot2)
library(wordcloud)
library(sentimentr)
library(reshape2)
library(readr)
library(shiny)
library(DT)
library(lubridate)
library(tidyverse)
library(Lahman)
library(nycflights13)
rm(list = ls())
#Exercises - Useful Summary Functions
flights <- nycflights13::flights
##1.
#I believe arrival delay is more important because it causes departure
# in the future with the other flights the plane has.
##2.
#not_cancelled <- flights %>%
#count(dest)
#not_cancelled <- flights  %>%
#count(tailnum, wt = distance)
#Another way for this one is ->
#not_cancelled <- flights %>%
#filter(!is.na(dep_delay), !is.na(arr_delay))
#And second is ->
#not_cancelled <- flights %>%
#group_by(tailnum) %>%
#summarise(n = sum(distance))
##3.
#It is suboptimal because it checks two columns of data instead of just
#checking one column. I think the most important column is arr_delay
#because then the plane didn't arrive at all.
##4.
cancelled_flights <- flights %>%
mutate(cancelled = is.na(dep_delay) | is.na(arr_delay)) %>%
group_by(year, month, day) %>%
summarise(flights_num = n(), cancelled_num = sum(cancelled))
ggplot(cancelled_flights) +
geom_point(aes(flights_num, cancelled_num))
#there seems to be an increase in cancelled flights as there are more flights
#scheduled in general.
cancelled_avg_delay <- flights %>%
mutate(cancelled = is.na(dep_delay) | is.na(arr_delay)) %>%
group_by(year, month, day) %>%
summarise(cancelled_avg = mean(cancelled), avg_delay =
(mean(arr_delay, na.rm = TRUE) + mean(dep_delay, na.rm = TRUE))/2)
ggplot(cancelled_avg_delay) +
geom_point(aes(avg_delay, cancelled_avg))
#there does seem to be a proportion between average delay and cancelled flights.
##5.
worst_carrier <- flights %>%
group_by(carrier) %>%
summarise(avg_delay = (mean(arr_delay, na.rm = TRUE) +
mean(dep_delay, na.rm = TRUE))/2)
#carrier F9 had the worst delay with 21.06 being the metric.
#I tried the challenge I didn't get it.
badcarriers <- flights %>%
group_by(carrier,dest) %>%
summarize(n())
##6.
plane_delays <- flights %>%
filter(dep_delay > 60) %>%
group_by(tailnum) %>%
summarise(first_delay = min(time_hour))
final_delay_df <- flights %>%
left_join(plane_delays, by = "tailnum") %>%
group_by(tailnum) %>%
summarise(flights_before_delay = sum(time_hour < first_delay))
#here is the code to how many flights a plane had before its first delay
##7.
sort_practice <- flights %>%
count(dest, sort = TRUE)
#it automatically soerts the new dataframe in order from max to min using n.
View(badcarriers)
View(nodes)
View(links)
View(dataset)
;\
ui <- fluidPage (
titlePanel(title = "Explore Every Companies Complaint's Dataset"),
h4('Companies Contriubution to Sentiments for All Complaints'),
fluidRow(
column(2,
selectInput('round', 'Choose a Round', choices = colnames1),
selectInput("region", "Choose a region", choices = colnames2)
),
column(4,plotOutput('plot_01')),
column(6,DT::dataTableOutput("table_01", width = "100%"))
)
)
library(tidytext)
library(textdata)
library(dplyr)
library(stringr)
library(tidyr)
library(ggplot2)
library(wordcloud)
library(sentimentr)
library(reshape2)
library(readr)
library(shiny)
library(DT)
library(lubridate)
library(tidyverse)
rm(list = ls())
#reads in all the .csv files
team_data <- readRDS("top_performers_2023.rds")
setwd("~/")
setwd("~/DATA-332/March-Madness/bracket")
library(tidytext)
library(textdata)
library(dplyr)
library(stringr)
library(tidyr)
library(ggplot2)
library(wordcloud)
library(sentimentr)
library(reshape2)
library(readr)
library(shiny)
library(DT)
library(lubridate)
library(tidyverse)
rm(list = ls())
#reads in all the .csv files
team_data <- readRDS("top_performers_2023.rds")
#making simple bracket with just Seed, Team, and Strength
bracket <- team_data %>%
select(Seed, Team, Overall_Team_Rating)%>%
rename(Rating = Overall_Team_Rating)
teams <- c("Alabama", "Houston", "Kansas", "Purdue", "Arizona", "Marquette", "Texas", "UCLA", "Baylor", "Gonzaga", "Kansas St.", "Xavier", "Connecticut", "Indiana", "Tennessee", "Virginia", "Duke", "Miami FL", "Saint Mary's", "San Diego St.", "Creighton", "Iowa St.", "Kentucky", "TCU", "Michigan St.", "Missouri", "Northwestern", "Texas A&M", "Arkansas", "Iowa", "Maryland", "Memphis", "Auburn", "Florida Atlantic", "Illinois", "West Virginia", "Boise St.", "Penn St.", "USC", "Utah St.", "Arizona St.", "North Carolina St.", "Pittsburgh", "Providence", "College of Charleston", "Drake", "Oral Roberts", "VCU", "Furman", "Iona", "Kent St.", "Louisiana Lafayette", "Grand Canyon", "Kennesaw St.", "Montana St.", "UC Santa Barbara", "Colgate", "Princeton", "UNC Asheville", "Vermont", "Fairleigh Dickinson", "Howard", "Northern Kentucky", "Texas A&M Corpus Chris")
regions <- c("South", "Midwest", "West", "East", "South", "East",             "Midwest", "West", "South", "West", "East",         "Midwest", "West",       "Midwest", "East",      "South", "East",     "Midwest", "West",         "South",           "South", "Midwest",    "East", "West",      "East",            "South", "West",         "Midwest", "West", "Midwest", "South", "East",         "Midwest", "East", "West", "South",                            "West", "Midwest", "East", "South",        "West", "South",                "Midwest", "East",               "South",          "Midwest", "East",      "West", "South", "West", "Midwest", "East",                     "West", "Midwest",           "East",        "South",          "Midwest", "South", "West", "East",                   "East",                      "West", "Midwest",         "South")
teamsRegions <- data.frame(Team = teams, Region = regions)
bracket <- left_join(bracket, teamsRegions, by = "Team") %>%
arrange(desc(Region))
bracket <- na.omit(bracket)
bracket$Round1 <- 0
bracket$Round2 <- 0
bracket$Sweet16 <- 0
bracket$Elite8 <- 0
bracket$Final4 <- 0
bracket$Championship <- 0
#### variability added ###
lowerOffset <- .75
higherOffset <- 1.50
### Define groups ###
groupA <- c(1, 16, 8, 9)
groupB <- c(2, 15, 7, 10)
groupC <- c(3, 14, 6, 11)
groupD <- c(4, 13, 5, 12)
############# EAST BRACKET #############
bracketEast <- bracket$Region == "East"
eastBracket <- bracket[bracketEast,]
# Add group column to eastBracket dataframe
eastBracket$Group <- ifelse(eastBracket$Seed %in% groupA, "A",
ifelse(eastBracket$Seed %in% groupB, "B",
ifelse(eastBracket$Seed %in% groupC, "C",
ifelse(eastBracket$Seed %in% groupD, "D", NA))))
# Modify the for loop to only iterate over each group
for (group in c("A", "B", "C", "D")) {
groupTeams <- eastBracket %>% filter(Group == group)
# Iterate over each team within the group
for (i in 1:2) {
countUp <- i
countDown <- 4 - i
winners <- ifelse(groupTeams$Rating[countUp] + runif(1, -lowerOffset, lowerOffset) > groupTeams$Rating[countDown] + runif(1, -higherOffset, higherOffset), countUp, countDown)
groupTeams$Round1[winners] <- 1
}
# Update eastBracket dataframe with modified groupTeams
eastBracket[eastBracket$Group == group, ] <- groupTeams
}
# Arrange by seed and round 1
eastBracket <- eastBracket %>%
arrange(Seed) %>%
arrange(Group)
# Round 2
for (group in c("A", "B", "C", "D")) {
groupTeams <- eastBracket %>% filter(Group == group)
round1Winners <- groupTeams %>% filter(Round1 == 1)
# Iterate over each team within the group
for (i in 1:2) {
countUp <- i
countDown <- 2 - i
winners <- ifelse(round1Winners$Rating[countUp] + runif(1, -lowerOffset, lowerOffset) > round1Winners$Rating[countDown] + runif(1, -higherOffset, higherOffset), countUp, countDown)
round1Winners$Round2[winners] <- 1
}
# Update eastBracket dataframe with modified round1Winners
eastBracket[eastBracket$Group == group & eastBracket$Round1 == 1, ] <- round1Winners
}
# Arrange by seed and round 2
eastBracket <- eastBracket %>%
arrange(Seed) %>%
arrange(Group) %>%
arrange(desc(Round2))
#Sweet 16
for (i in 1:2) {
countUp <- i
countDown <- 4 - i + 1
winners <- ifelse(eastBracket$Rating[countUp] + runif(1, -lowerOffset, lowerOffset) > eastBracket$Rating[countDown] + runif(1, -higherOffset, higherOffset), countUp, countDown)
eastBracket$Sweet16[winners] <- 1
}
eastBracket <- eastBracket %>%
arrange(Seed) %>%
arrange(desc(Sweet16))
#Elite 8
winners <- ifelse(eastBracket$Rating[1] + runif(1, -lowerOffset, lowerOffset) > eastBracket$Rating[2] + runif(1, -higherOffset, higherOffset), 1, 2)
eastBracket$Elite8[winners] <- 1
############### WEST ##################
bracketWest <- bracket$Region == "West"
westBracket <- bracket[bracketWest,]
# Add group column to southBracket dataframe
westBracket$Group <- ifelse(westBracket$Seed %in% groupA, "A",
ifelse(westBracket$Seed %in% groupB, "B",
ifelse(westBracket$Seed %in% groupC, "C",
ifelse(westBracket$Seed %in% groupD, "D", NA))))
# Modify the for loop to only iterate over each group
for (group in c("A", "B", "C", "D")) {
groupTeams <- westBracket %>% filter(Group == group)
# Iterate over each team within the group
for (i in 1:2) {
countUp <- i
countDown <- 4 - i
winners <- ifelse(groupTeams$Rating[countUp] + runif(1, -lowerOffset, lowerOffset) > groupTeams$Rating[countDown] + runif(1, -higherOffset, higherOffset), countUp, countDown)
groupTeams$Round1[winners] <- 1
}
# Update westBracket dataframe with modified groupTeams
westBracket[westBracket$Group == group, ] <- groupTeams
}
# Arrange by seed and round 1
westBracket <- westBracket %>%
arrange(Seed) %>%
arrange(Group)
# Round 2
for (group in c("A", "B", "C", "D")) {
groupTeams <- westBracket %>% filter(Group == group)
round1Winners <- groupTeams %>% filter(Round1 == 1)
# Iterate over each team within the group
for (i in 1:2) {
countUp <- i
countDown <- 2 - i
winners <- ifelse(round1Winners$Rating[countUp] + runif(1, -lowerOffset, lowerOffset) > round1Winners$Rating[countDown] + runif(1, -higherOffset, higherOffset), countUp, countDown)
round1Winners$Round2[winners] <- 1
}
# Update westBracket dataframe with modified round1Winners
westBracket[westBracket$Group == group & westBracket$Round1 == 1, ] <- round1Winners
}
# Arrange by seed and round 2
westBracket <- westBracket %>%
arrange(Seed) %>%
arrange(Group) %>%
arrange(desc(Round2))
#Sweet 16
for (i in 1:2) {
countUp <- i
countDown <- 4 - i + 1
winners <- ifelse(westBracket$Rating[countUp] + runif(1, -lowerOffset, lowerOffset) > westBracket$Rating[countDown] + runif(1, -higherOffset, higherOffset), countUp, countDown)
westBracket$Sweet16[winners] <- 1
}
westBracket <- westBracket %>%
arrange(Seed) %>%
arrange(desc(Sweet16))
#Elite 8
winners <- ifelse(westBracket$Rating[1] + runif(1, -lowerOffset, lowerOffset) > westBracket$Rating[2] + runif(1, -higherOffset, higherOffset), 1, 2)
westBracket$Elite8[winners] <- 1
############### SOUTH #################
bracketSouth <- bracket$Region == "South"
southBracket <- bracket[bracketSouth,]
# Add group column to southBracket dataframe
southBracket$Group <- ifelse(southBracket$Seed %in% groupA, "A",
ifelse(southBracket$Seed %in% groupB, "B",
ifelse(southBracket$Seed %in% groupC, "C",
ifelse(southBracket$Seed %in% groupD, "D", NA))))
# Modify the for loop to only iterate over each group
for (group in c("A", "B", "C", "D")) {
groupTeams <- southBracket %>% filter(Group == group)
# Iterate over each team within the group
for (i in 1:2) {
countUp <- i
countDown <- 4 - i
winners <- ifelse(groupTeams$Rating[countUp] + runif(1, -lowerOffset, lowerOffset) > groupTeams$Rating[countDown] + runif(1, -higherOffset, higherOffset), countUp, countDown)
groupTeams$Round1[winners] <- 1
}
# Update southBracket dataframe with modified groupTeams
southBracket[southBracket$Group == group, ] <- groupTeams
}
# Arrange by seed and round 1
southBracket <- southBracket %>%
arrange(Seed) %>%
arrange(Group)
# Round 2
for (group in c("A", "B", "C", "D")) {
groupTeams <- southBracket %>% filter(Group == group)
round1Winners <- groupTeams %>% filter(Round1 == 1)
# Iterate over each team within the group
for (i in 1:2) {
countUp <- i
countDown <- 2 - i
winners <- ifelse(round1Winners$Rating[countUp] + runif(1, -lowerOffset, lowerOffset) > round1Winners$Rating[countDown] + runif(1, -higherOffset, higherOffset), countUp, countDown)
round1Winners$Round2[winners] <- 1
}
# Update southBracket dataframe with modified round1Winners
southBracket[southBracket$Group == group & southBracket$Round1 == 1, ] <- round1Winners
}
# Arrange by seed and round 2
southBracket <- southBracket %>%
arrange(Seed) %>%
arrange(Group) %>%
arrange(desc(Round2))
#Sweet 16
for (i in 1:2) {
countUp <- i
countDown <- 4 - i + 1
winners <- ifelse(southBracket$Rating[countUp] + runif(1, -lowerOffset, lowerOffset) > southBracket$Rating[countDown] + runif(1, -higherOffset, higherOffset), countUp, countDown)
southBracket$Sweet16[winners] <- 1
}
southBracket <- southBracket %>%
arrange(Seed) %>%
arrange(desc(Sweet16))
#Elite 8
winners <- ifelse(southBracket$Rating[1] + runif(1, -lowerOffset, lowerOffset) > southBracket$Rating[2] + runif(1, -higherOffset, higherOffset), 1, 2)
southBracket$Elite8[winners] <- 1
############## MIDWEST #################
bracketMidwest <- bracket$Region == "Midwest"
midwestBracket <- bracket[bracketMidwest,]
# Add group column to midwestBracket dataframe
midwestBracket$Group <- ifelse(midwestBracket$Seed %in% groupA, "A",
ifelse(midwestBracket$Seed %in% groupB, "B",
ifelse(midwestBracket$Seed %in% groupC, "C",
ifelse(midwestBracket$Seed %in% groupD, "D", NA))))
# Modify the for loop to only iterate over each group
for (group in c("A", "B", "C", "D")) {
groupTeams <- midwestBracket %>% filter(Group == group)
# Iterate over each team within the group
for (i in 1:2) {
countUp <- i
countDown <- 4 - i
winners <- ifelse(groupTeams$Rating[countUp] + runif(1, -lowerOffset, lowerOffset) > groupTeams$Rating[countDown] + runif(1, -higherOffset, higherOffset), countUp, countDown)
groupTeams$Round1[winners] <- 1
}
# Update midwestBracket dataframe with modified groupTeams
midwestBracket[midwestBracket$Group == group, ] <- groupTeams
}
# Arrange by seed and round 1
midwestBracket <- midwestBracket %>%
arrange(Seed) %>%
arrange(Group)
# Round 2
for (group in c("A", "B", "C", "D")) {
groupTeams <- midwestBracket %>% filter(Group == group)
round1Winners <- groupTeams %>% filter(Round1 == 1)
# Iterate over each team within the group
for (i in 1:2) {
countUp <- i
countDown <- 2 - i
winners <- ifelse(round1Winners$Rating[countUp] + runif(1, -lowerOffset, lowerOffset) > round1Winners$Rating[countDown] + runif(1, -higherOffset, higherOffset), countUp, countDown)
round1Winners$Round2[winners] <- 1
}
# Update midwestBracket dataframe with modified round1Winners
midwestBracket[midwestBracket$Group == group & midwestBracket$Round1 == 1, ] <- round1Winners
}
# Arrange by seed and round 2
midwestBracket <- midwestBracket %>%
arrange(Seed) %>%
arrange(Group) %>%
arrange(desc(Round2))
#Sweet 16
for (i in 1:2) {
countUp <- i
countDown <- 4 - i + 1
winners <- ifelse(midwestBracket$Rating[countUp] + runif(1, -lowerOffset, lowerOffset) > midwestBracket$Rating[countDown] + runif(1, -higherOffset, higherOffset), countUp, countDown)
midwestBracket$Sweet16[winners] <- 1
}
midwestBracket <- midwestBracket %>%
arrange(Seed) %>%
arrange(desc(Sweet16))
#Elite 8
winners <- ifelse(midwestBracket$Rating[1] + runif(1, -lowerOffset, lowerOffset) > midwestBracket$Rating[2] + runif(1, -higherOffset, higherOffset), 1, 2)
midwestBracket$Elite8[winners] <- 1
#### combining brackets ####
bracket <- rbind(westBracket, midwestBracket, southBracket, eastBracket)
bracket <- bracket %>%
arrange(Seed) %>%
arrange(Region) %>%
arrange(desc(Elite8))
#Final4
for (i in 1:2) {
countUp <- i
countDown <- i + 2
winners <- ifelse(bracket$Rating[countUp] + runif(1, -lowerOffset, lowerOffset) > bracket$Rating[countDown] + runif(1, -higherOffset, higherOffset), countUp, countDown)
bracket$Final4[winners] <- 1
}
bracket <- bracket %>%
arrange(desc(Final4))
#Championship
winners <- ifelse(bracket$Rating[1] + runif(1, -lowerOffset, lowerOffset) > bracket$Rating[2] + runif(1, -higherOffset, higherOffset), 1, 2)
bracket$Championship[winners] <- 1
#Orgnaization
bracket <- bracket %>%
arrange(desc(Round1)) %>%
arrange(desc(Round2)) %>%
arrange(desc(Sweet16)) %>%
arrange(desc(Elite8)) %>%
arrange(desc(Final4)) %>%
arrange(desc(Championship))
################ shiny app ################
dataset <- bracket
colnames1 = c("Round1", "Round2", "Sweet16", "Elite8", "Final4", "Championship")
colnames2 = c("West", "East", "Midwest", "South")
ui <- fluidPage (
titlePanel(title = "Explore Every Companies Complaint's Dataset"),
h4('Companies Contriubution to Sentiments for All Complaints'),
fluidRow(
column(2,
selectInput('round', 'Choose a Round', choices = colnames1),
selectInput("region", "Choose a region", choices = colnames2)
),
column(4,plotOutput('plot_01')),
column(6,DT::dataTableOutput("table_01", width = "100%"))
)
)
server <- function(input, output) {
filtered_data <- reactive ({
dataset %>%
filter(Region %in% input$region)
})
output$plot_01 <- renderPlot({
filtered_data() %>%
ggplot(aes(y=input$round, fill = Team)) +
geom_col(show.legend = TRUE)
})
output$table_01 <- DT::renderDataTable(dataset, options = list(pageLength = 4))
}
shinyApp(ui=ui, server=server)
